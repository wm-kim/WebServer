@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BlazorStudy.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="AddNewForecast">
        Add New Forecast
    </button>

    if(_showPopup)
    {
        // popup을 나타내는 class
        <div class = "modal" style="display:block" role ="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add Forecast</h3>
                        <button type="button" class="close" @onclick="ClosePopup">
                            <span area-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="_addForecast" OnValidSubmit="SaveForecast">

                            @*마지막으로 기능을 사용하겠다고 부품을 넣어줌. Form validation 기능을 ON*@
                            <DataAnnotationsValidator/>

                            @*에러가 있으면 메시지 상세 출력*@
                            <ValidationSummary/>

                            <label for="TemperatureC">TemperatureC</label>
                            @*<input class="form-control" type="text" placeholder="TemperatureC" @bind="_addForecast.TemperatureC"/>*@
                            <InputNumber class="form-control" placeholder="TemperatureC" @bind-Value="_addForecast.TemperatureC"/>
                            <label for="Summary">Summary</label>
                            @*<input class="form-control" type="text" placeholder="Summary" @bind="_addForecast.Summary"/>*@
                            <InputText class="form-control" placeholder="Summary"  @bind-Value="_addForecast.Summary"/>
                            <br />
                            @*onclick에서 처리하는게 아니라 Editform에서 처리할 것이므로 onclick 필요없음
                            <button class="btn btn-primary" @onclick="SaveForecast">Save</button>*@
                            <button class="btn btn-primary" @onclick="SaveForecast">Save</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div> 
    }
}

@code {
    private List<WeatherForecast> _forecasts;

    bool _showPopup = false;
    WeatherForecast _addForecast;

    protected override async Task OnInitializedAsync()
    {
        _forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    // 팝업을 쓰려면 javascript를 따른 기능을 이용해야 될것같지만
    // blazor에서 if else 처리로 껐다 켰다하면 편할 것이다.
    void AddNewForecast()
    {
        _showPopup = true;
        _addForecast = new WeatherForecast();
    }

    // 아무것도 입력안하고 save눌러도 빈값이 들어감 - validation 어떻게함? 
    // 1. attribute를 이용해서 어떻게 만들어야하는지 기입
    // 2. validation까지 처리할 수 있는 EditForm
    // blazor에서 지원하는 기능 InputNumber, validation 적용 type은 입력할 필요없다. 
    void SaveForecast()
    {
        _showPopup = false;
        _addForecast.Date = DateTime.Now;
        _forecasts.Add(_addForecast);
    }

    void ClosePopup()
    {
        _showPopup = false;
    }
}
