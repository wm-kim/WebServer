@page "/user"
@using BlazorApp.Data;

<h3>Online Users</h3>

<label>Theme Color</label>
<select class="form-control" @bind="_selectedColor">
	@foreach(var option in _options)	
	{
		<option value="@option">
			@option
		</option>
	}
</select>

@*Parameter를 하나씩 지정하기보다 한번에 하는 방법, 흘려보낸다, Name 구분하기 위한 Key, Value 실제 Key의 값*@
@*범위내에서 유지되고 깊이는 상관 없다. 똑같은 [CascadingParameter(Name = "ThemeColor")] 문법으로 받아줄 수 있다.*@
<CascadingValue Name="ThemeColor" Value="_selectedColor">
	<!-- parameter였으면 사용하는 부품마다 Color = "" 이런식으로 넣어줘야했음 -->
	<ShowUser Users="_users" CallbackTest="CallbackTestFunc" @ref="_showUser"></ShowUser>
</CascadingValue>

<br />

<div class="cotainer">
	<div class = "row">
		<div class = "col">
			<input class="form-control" placeholder="Add User" @bind-value="_inputName" />
		</div>
		<div class = "col">
			<!-- html 속성에도 binding 가능 -->
			<!-- conditional attribute 속성 자체에 조건을 붙일 수 도 있다. ex disabled -->
			<button class="btn btn-primary" type="button" @onclick="AddUser" disabled="@(_users.Count >= 5)">Add a User</button>
		</div>
	</div>
</div>

@code {
	string _selectedColor = "Green";
	List<string> _options = new List<string>() { "Green", "Red", "Blue" };

	List<UserData> _users = new List<UserData>();
	// child가 가지고 있는 함수를 호출하기 위해서 reference
	ShowUser _showUser;

	string _inputName;

	void AddUser()
	{
		_showUser.AddUser(new UserData() { Name = _inputName });
		// _users.Add(new UserData() { Name = _inputName });
		_inputName = "";
	}

	void KickUser(UserData user)
	{
		_users.Remove(user);
	}

	void CallbackTestFunc()
	{
		_inputName = "CallbackTest";
		StateHasChanged();
	}
}
